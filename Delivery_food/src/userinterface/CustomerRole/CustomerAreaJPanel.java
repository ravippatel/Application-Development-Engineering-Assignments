/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Restaurant.Restaurant;

import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


public class CustomerAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private EcoSystem ecoSystem;
    private Restaurant restaurant;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public CustomerAreaJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem ecoSystem) {
        initComponents();        
        this.userProcessContainer = userProcessContainer;        
        this.userAccount = account; 
        this.ecoSystem = ecoSystem;
        populateComboBox();
        populatePreviousOrderTable();
    }
    
    public void populateComboBox(){
       restComboBox.removeAllItems();
       
       for (Restaurant restaurant : ecoSystem.getRestaurantDirectory().getRestaurentList()){
            restComboBox.addItem(restaurant.getRestaurentName());
        }
    }
    
    public void populateRequestTable(){
        
       for (Restaurant restaurant : ecoSystem.getRestaurantDirectory().getRestaurentList()){
            restComboBox.addItem(restaurant.getRestaurentName());
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        restComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnCheckout = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        previousOrderTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 153, 153));

        menuTable.setBackground(new java.awt.Color(204, 204, 204));
        menuTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "MENU"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(menuTable);

        restComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel1.setText("CHOOSE RESTAURANT  :");

        btnCheckout.setText("CHECKOUT ");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        previousOrderTable.setBackground(new java.awt.Color(204, 204, 204));
        previousOrderTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        previousOrderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ORDER ID", "RESTAURANT NAME", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(previousOrderTable);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 14)); // NOI18N
        jLabel2.setText("PREVIOUS ORDERS ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(restComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnCheckout))
                .addGap(0, 132, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(restComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnCheckout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
//       Restaurant r = (Restaurant) restComboBox.getSelectedItem(); 
       for (Restaurant restaurant : ecoSystem.getRestaurantDirectory().getRestaurentList()){
            if(restaurant.getRestaurentName().equals(restComboBox.getSelectedItem())) {
                PlaceOrderJPanel placeOrderJPanel = new PlaceOrderJPanel(userProcessContainer, userAccount, ecoSystem, restaurant);
                userProcessContainer.add("placeOrderJPanel", placeOrderJPanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }
       
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void restComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restComboBoxActionPerformed
        // TODO add your handling code here:
         
         System.out.println(restComboBox.getSelectedItem());
         for (Restaurant restaurant : ecoSystem.getRestaurantDirectory().getRestaurentList()){
            if(restaurant.getRestaurentName().equals(restComboBox.getSelectedItem())) {
                populateTable(restaurant);
            }
        }
//         
//         populateTable(r);
    }//GEN-LAST:event_restComboBoxActionPerformed

    public void populateTable(Restaurant res){
        DefaultTableModel model = (DefaultTableModel) menuTable.getModel();
        model.setRowCount(0);
            for (String menu : res.getMenulist()) {
                Object[] row = new Object[2];
                row[0] = menu;
                model.addRow(row);
            }  
    }
    
     public void populatePreviousOrderTable(){
        DefaultTableModel model = (DefaultTableModel) previousOrderTable.getModel();
        
        model.setRowCount(0);
            for (WorkRequest wr :  userAccount.getWorkQueue().getWorkRequestList()) {
                Object[] row = new Object[3];
                row[0] = wr.getMessage();
                row[1] = wr.getId();
                row[2] = wr.getStatus();
                model.addRow(row);
            }  
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable menuTable;
    private javax.swing.JTable previousOrderTable;
    private javax.swing.JComboBox<String> restComboBox;
    // End of variables declaration//GEN-END:variables
}
